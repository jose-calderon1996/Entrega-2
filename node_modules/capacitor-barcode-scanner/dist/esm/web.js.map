{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { BarcodeScannerPlugin, MultiScanOptions, MultiScanResult, ScanResult } from './definitions';\n\nimport * as _jsQR from './jsqr.js';\n\nconst jsQR = (_jsQR as any).default || _jsQR;\n\nexport class BarcodeScannerWeb extends WebPlugin implements BarcodeScannerPlugin {\n\n\n  async multiScan(opts:MultiScanOptions): Promise<MultiScanResult> {\n\n\n    const scans = await this.readInternal(opts.maxScans);\n\n    if(scans.length > 0){\n      return {result:true,codes:scans,count:scans.length};\n    }else{\n      return {result:false,count:0,codes:[]};\n    }\n\n  }\n\n\n  async scan():Promise<ScanResult>{\n\n    const scans = await this.readInternal();\n\n    if(scans.length > 0){\n      return {result:true,code:scans[0]};\n    }else{\n      return {result:false};\n    }\n\n  }\n\n\n  private async readInternal(reads = 1){\n    const fInput = document.createElement('input');\n    fInput.type = 'file';\n    fInput.accept = 'image/*';\n    if(reads > 1){\n      fInput.multiple = true;\n    }\n    fInput.style.display = 'none';\n\n    document.body.appendChild(fInput);\n\n    const promise = new Promise<string[]>((resolve)=>{\n      fInput.addEventListener('change', async () => {\n        try {\n          if (fInput.files && fInput.files.length > 0) {\n\n            const scans:string[]= [];\n            const min = Math.min(fInput.files.length,reads);\n            for (let i = 0; i < min; i++) {\n              const img = fInput.files[i];\n              const imgData = await this.blobToImageData(img);    \n              const code = jsQR(imgData.data, imgData.width, imgData.height);\n              //console.log(code);\n              if(code && code.data){\n                scans.push(code.data);\n              }else{\n                console.error('jsQR return null',code);\n              }\n            }\n            \n            resolve(scans);\n          } else {\n            resolve([])\n          }\n        } catch (error) {\n          console.error(error);\n        }\n        document.body.removeChild(fInput);\n      });\n    });\n\n    fInput.click();\n    return promise;\n  }\n\n  private async blobToImageData(blob: Blob, maxWidth = 1500, maxHeight = 1500): Promise<ImageData> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(blob);\n\n        reader.onloadend = () => {\n            const image = new Image();\n            image.src = reader.result as string;\n\n            image.onload = () => {\n                const scale = Math.min(maxWidth / image.width, maxHeight / image.height, 1); \n\n                const canvas = document.createElement('canvas');\n                canvas.width = image.width * scale;\n                canvas.height = image.height * scale;\n\n                const ctx = canvas.getContext('2d')!;\n                ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n                // Libera la memoria de la imagen y del canvas\n                canvas.width = 0;\n                canvas.height = 0;\n\n                resolve(imageData);\n            };\n\n            image.onerror = (e) => reject(new Error(\"Error al cargar la imagen.\"+e));\n        };\n\n        reader.onerror = (e) => reject(new Error(\"Error al leer el blob.\"+e));\n    });\n}\n}\n"]}